# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-07-12 08:35
from __future__ import unicode_literals

from django.db import migrations


SYSTEM_PAGES = [
    '',
    'about',
    'about/employment',
    'about/employment/faq',
    'about/employment/job-fairs',
    'about/employment/life-at-clublink',
    'about/employment/opportunities',
    'about/employment/who-we-are',
    'about/news',
    'about/our-clubs',
    'accessibility',
    'contact',
    'daily-fee-golf',
    'daily-fee-golf/book',
    'daily-fee-golf/players-club',
    'events',
    'events/golf-tournaments',
    'events/meetings',
    'events/weddings',
    'events/weddings/cultural',
    'events/weddings/gallery',
    'events/weddings/resorts',
    'events/weddings/testimonials',
    'events/weddings/venues',
    'improvement',
    'improvement/indoor-facilities',
    'improvement/our-academies',
    'membership',
    'membership/clublink-life',
    'membership/faq',
    'membership/promotions',
    'membership/rules',
    'privacy-policy',
    'resorts',
    'sitemap',
]

CREATE = {
    'about': {
        'headline': 'About Us',
        'heading_1': 'Overview',
    },
    'about/employment': {
        'headline': 'Employment',
        'heading_1': 'Join Our Team',
    },
    'about/employment/faq': {
        'heading_1': 'FAQ',
    },
    'about/employment/job-fairs': {
        'heading_1': 'Attend a Job Fair',
    },
    'about/employment/life-at-clublink': {
        'heading_1': 'Life at ClubLink',
    },
    'about/employment/opportunities': {
        'heading_1': 'Current Opportunities',
    },
    'about/employment/who-we-are': {
        'heading_1': 'Who We Are',
    },
    'about/news': {
        'headline': 'ClubLink News',
    },
    'about/our-clubs': {
        'headline': 'Our Clubs',
    },
    'accessibility': {
        'headline': 'Accessibility',
    },
    'contact': {
        'headline': 'Contact',
        'heading_1': 'Contact Us',
    },
    'daily-fee-golf': {
        'headline': 'Daily Fee Golf',
        'heading_1': 'Daily Fee Club Listing',
    },
    'daily-fee-golf/book': {
        'heading_1': 'Book a Tee Time',
    },
    'daily-fee-golf/players-club': {
        'heading_2': 'Daily Fee Rates',
    },
    'events': {
        'headline': 'Events',
    },
    'events/golf-tournaments': {
        'heading_1': 'Golf Tournaments',
    },
    'events/meetings': {
        'heading_1': 'Meetings & Banquets',
    },
    'events/weddings': {
        'headline': 'Weddings',
        'heading_1': 'Overview',
    },
    'events/weddings/cultural': {
        'heading_1': 'Cultural Weddings',
    },
    'events/weddings/gallery': {
        'heading_1': 'Our Collection of Photos',
    },
    'events/weddings/resorts': {
        'heading_1': 'Resort Weddings',
    },
    'events/weddings/testimonials': {
        'heading_1': 'Testimonials',
    },
    'events/weddings/venues': {
        'heading_1': 'Venues',
    },
    'improvement': {
        'headline': 'Game Improvement',
    },
    'improvement/indoor-facilities': {
        'heading_1': 'Indoor Facilities',
    },
    'improvement/our-academies': {
        'heading_1': 'Our Academies',
    },
    'membership': {
        'headline': 'Membership',
    },
    'membership/faq': {
        'heading_1': 'Membership FAQ',
    },
    'membership/promotions': {
        'heading_1': 'Promotions',
    },
    'membership/rules': {
        'heading_1': 'Rules & Regulations',
    },
    'privacy-policy': {
        'headline': 'Privacy Policy',
    },
    'resorts': {
        'headline': 'Resorts',
    },
    'sitemap': {
        'headline': 'Site Map',
    },
}

RENAME = {
    'about': {
        'copy_1': 'description',
    },
    'about/employment': {
        'copy_1': 'description',
    },
    'contact': {
        'copy_1': 'description',
    },
    'daily-fee-golf': {
        'copy_1': 'description',
    },
    'daily-fee-golf/players-club': {
        'copy_1': 'players-club-notice',
        'copy_2': 'description',
    },
    'events/golf-tournaments': {
        'copy_1': 'description',
        'copy_3': 'contact',
    },
    'improvement': {
        'heading_1': 'title',
        'copy_1': 'description',
    },
    'membership': {
        'heading_1': 'title',
        'copy_1': 'description',
    },
    'membership/clublink-life': {
        'heading_1': 'title',
        'copy_1': 'description',
    },
    'membership/promotions': {
        'copy_1': 'description',
    },
}

IMAGES_RENAME = {
    'about/employment': {
        'tile_1': 'employment.who-we-are',
        'tile_2': 'employment.opportunities',
        'tile_3': 'employment.life-at-clublink',
        'tile_4': 'employment.job-fairs',
    },
    'membership': {
        'cta_bg': 'feature',
    },
    'membership/clublink-life': {
        'footer-image': 'feature',
    },
}


def migrate(apps, schema_editor):
    CorpImage = apps.get_model('cms', 'CorpImage')
    CorpPage = apps.get_model('cms', 'CorpPage')
    CorpSnippet = apps.get_model('cms', 'CorpSnippet')

    for page_path in IMAGES_RENAME:
        try:
            page = CorpPage.objects.get(full_path=page_path)
        except CorpPage.DoesNotExist:
            pass
        else:
            for slug in IMAGES_RENAME[page_path]:
                old_slug = IMAGES_RENAME[page_path][slug]
                CorpImage.objects.filter(page=page, slug=slug).delete()
                images = CorpImage.objects.filter(page=page, slug=old_slug)
                images.update(slug=slug)

    for page_path in RENAME:
        try:
            page = CorpPage.objects.get(full_path=page_path)
        except CorpPage.DoesNotExist:
            pass
        else:
            for slug in RENAME[page_path]:
                old_slug = RENAME[page_path][slug]
                CorpSnippet.objects.filter(page=page, slug=slug).delete()
                snippets = CorpSnippet.objects.filter(page=page, slug=old_slug)
                snippets.update(slug=slug)

    for page_path in CREATE:
        try:
            page = CorpPage.objects.get(full_path=page_path)
        except CorpPage.DoesNotExist:
            pass
        else:
            for slug in CREATE[page_path]:
                content = CREATE[page_path][slug]
                snippet, _ = CorpSnippet.objects.update_or_create(
                    page=page, locale='en', slug=slug, defaults={'content': content})


def reverse_migrate(apps, schema_editor):
    CorpImage = apps.get_model('cms', 'CorpImage')
    CorpPage = apps.get_model('cms', 'CorpPage')
    CorpSnippet = apps.get_model('cms', 'CorpSnippet')

    for page_path in IMAGES_RENAME:
        try:
            page = CorpPage.objects.get(full_path=page_path)
        except CorpPage.DoesNotExist:
            pass
        else:
            for slug in IMAGES_RENAME[page_path]:
                old_slug = IMAGES_RENAME[page_path][slug]
                CorpImage.objects.filter(page=page, slug=old_slug).delete()
                images = CorpImage.objects.filter(page=page, slug=slug)
                images.update(slug=old_slug)

    for page_path in RENAME:
        try:
            page = CorpPage.objects.get(full_path=page_path)
        except CorpPage.DoesNotExist:
            pass
        else:
            for slug in RENAME[page_path]:
                old_slug = RENAME[page_path][slug]
                CorpSnippet.objects.filter(page=page, slug=old_slug).delete()
                snippets = CorpSnippet.objects.filter(page=page, slug=slug)
                snippets.update(slug=old_slug)


def create_system_pages(apps, schema_editor):
    CorpPage = apps.get_model('cms', 'CorpPage')

    for path in SYSTEM_PAGES:
        base_path = path.split('/')
        slug = base_path.pop()
        base_path = '/'.join(base_path)

        parent = CorpPage.objects.get(full_path=base_path) if base_path else None
        page, _ = CorpPage.objects.get_or_create(parent=parent, slug=slug)
        page.full_path = path
        page.is_locked = True
        page.save()


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0033_auto_20170712_0002'),
    ]

    operations = [
        migrations.RunPython(create_system_pages, lambda x, y: None),
        migrations.RunPython(migrate, reverse_migrate),
    ]
