# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-07-02 13:49
from __future__ import unicode_literals

from django.db import migrations


CREATE = {
    'about/': {
        'headline': 'About Us',
        'heading_1': 'Club Overview',
    },
    'about/golf-shop/': {
        'heading_1': 'Golf Shop',
    },
    'about/policies/': {
        'heading_1': 'Club Policies',
    },
    'about/team/': {
        'heading_1': 'Our Team',
    },
    'contact-us/': {
        'headline': 'Contact Us',
    },
    'daily-fee-golf/': {
        'headline': 'Daily Fee Golf',
    },
    'daily-fee-golf/book/': {
        'heading_1': 'Book a Tee Time',
    },
    'daily-fee-golf/rates/': {
        'heading_2': 'Daily Fee Rates',
    },
    'events/': {
        'headline': 'Events',
    },
    'events/golf-tournaments/': {
        'heading_1': 'Golf Tournaments',
    },
    'events/meetings/': {
        'heading_1': 'Meetings & Banquets',
    },
    'game-improvement/': {
        'headline': 'Game Improvement',
        'heading_1': "We're Here to Help",
    },
    'linkline/': {
        'headline': 'LinkLine Online',
    },
    'linkline/book-a-tee-time/': {
        'heading_1': 'Book a Tee Time',
    },
    'linkline/golf-policies/': {
        'heading_1': 'Golf Policies',
    },
    'linkline/guest-fees/': {
        'heading_2': 'Member Guest Fees',
    },
    'linkline/terms-of-use/': {
        'heading_1': 'Terms of Use',
    },
    'membership/': {
        'headline': 'Membership',
        'heading_1': 'One Membership, More Golf',
    },
    'membership/guest-fees/': {
        'heading_2': 'Member Guest Fees',
    },
    'my-account/': {
        'headline': 'My Account',
    },
    'my-account/annual-dues/': {
        'heading_1': 'Annual Dues',
    },
    'my-account/member-services/': {
        'heading_1': 'Member Services',
    },
    'my-account/payment-terms/': {
        'heading_1': 'Payment Terms',
    },
    'my-club/': {
        'headline': 'My Club',
    },
    'my-club/bistro-menus/': {
        'heading_1': 'Bistro Menus',
    },
    'news/': {
        'headline': 'My News',
    },
}

RENAME = {
    'about/': {
        'copy_1': 'club-overview',
    },
    'about/golf-shop/': {
        'copy_1': 'shop-details',
    },
    'contact-us/': {
        'copy_1': 'directions',
    },
    'daily-fee-golf/book/': {
        'copy_1': 'description',
    },
    'daily-fee-golf/rates/': {
        'copy_1': 'players-club-notice',
        'copy_2': 'description',
    },
    'events/': {
        'copy_1': 'description',
    },
    'events/golf-tournaments/': {
        'copy_1': 'description',
    },
    'events/meetings/': {
        'copy_1': 'description',
        'copy_3': 'contact',
    },
    'events/weddings/': {
        'heading_1': 'headline',
        'copy_1': 'description',
    },
    'game-improvement/': {
        'copy_1': 'description',
    },
    'linkline/golf-policies/': {
        'copy_1': 'description',
    },
    'linkline/guest-fees/': {
        'copy_2': 'rate-list',
        'copy_3': 'description',
    },
    'linkline/terms-of-use/': {
        'copy_1': 'description',
    },
    'membership/': {
        'copy_1': 'overview',
        'copy_3': 'contact-details',
    },
    'membership/guest-fees/': {
        'copy_2': 'rate-list',
        'copy_3': 'description',
    },
    'my-account/annual-dues/': {
        'copy_1': 'description',
    },
    'my-account/member-services/': {
        'copy_1': 'description',
    },
    'my-account/payment-terms/': {
        'copy_1': 'description',
    },
    'my-club/bistro-menus/': {
        'copy_1': 'description',
    },
}

IMAGES_RENAME = {
    'events/': {
        'golf-tournaments': 'tile_1',
        'weddings': 'tile_2',
        'meetings': 'tile_3',
        'special': 'tile_4',
    },
}


def migrate(apps, schema_editor):
    Club = apps.get_model('clubs', 'Club')
    ClubImage = apps.get_model('cms', 'ClubImage')
    ClubPage = apps.get_model('cms', 'ClubPage')
    ClubSnippet = apps.get_model('cms', 'ClubSnippet')

    for club in Club.objects.filter():
        for page_path in IMAGES_RENAME:
            try:
                page = ClubPage.objects.get(club=club, full_path=page_path)
            except ClubPage.DoesNotExist:
                pass
            else:
                for slug in IMAGES_RENAME[page_path]:
                    old_slug = IMAGES_RENAME[page_path][slug]
                    ClubImage.objects.filter(page=page, slug=slug).delete()
                    images = ClubImage.objects.filter(page=page, slug=old_slug)
                    images.update(slug=slug)

        for page_path in RENAME:
            try:
                page = ClubPage.objects.get(club=club, full_path=page_path)
            except ClubPage.DoesNotExist:
                pass
            else:
                for slug in RENAME[page_path]:
                    old_slug = RENAME[page_path][slug]
                    ClubSnippet.objects.filter(page=page, slug=slug).delete()
                    snippets = ClubSnippet.objects.filter(page=page, slug=old_slug)
                    snippets.update(slug=slug)

        for page_path in CREATE:
            try:
                page = ClubPage.objects.get(club=club, full_path=page_path)
            except ClubPage.DoesNotExist:
                pass
            else:
                for slug in CREATE[page_path]:
                    content = CREATE[page_path][slug]
                    snippet, _ = ClubSnippet.objects.update_or_create(
                        page=page, locale='en', slug=slug, defaults={'content': content})


def reverse_migrate(apps, schema_editor):
    Club = apps.get_model('clubs', 'Club')
    ClubImage = apps.get_model('cms', 'ClubImage')
    ClubPage = apps.get_model('cms', 'ClubPage')
    ClubSnippet = apps.get_model('cms', 'ClubSnippet')

    for club in Club.objects.all():
        for page_path in IMAGES_RENAME:
            try:
                page = ClubPage.objects.get(club=club, full_path=page_path)
            except ClubPage.DoesNotExist:
                pass
            else:
                for slug in IMAGES_RENAME[page_path]:
                    old_slug = IMAGES_RENAME[page_path][slug]
                    ClubImage.objects.filter(page=page, slug=old_slug).delete()
                    images = ClubImage.objects.filter(page=page, slug=slug)
                    images.update(slug=old_slug)

        for page_path in RENAME:
            try:
                page = ClubPage.objects.get(club=club, full_path=page_path)
            except ClubPage.DoesNotExist:
                pass
            else:
                for slug in RENAME[page_path]:
                    old_slug = RENAME[page_path][slug]
                    ClubSnippet.objects.filter(page=page, slug=old_slug).delete()
                    snippets = ClubSnippet.objects.filter(page=page, slug=slug)
                    snippets.update(slug=old_slug)


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0026_clubpage_show_address_bar'),
    ]

    operations = [
        migrations.RunPython(migrate, reverse_migrate)
    ]
